#!/bin/bash
# Script pour importer des donn√©es d'un fichier SQL

# V√©rifier si un fichier est sp√©cifi√©
sql_file=$1
if [ -z "$sql_file" ]; then
  echo "‚ùå Erreur: Fichier SQL non sp√©cifi√©"
  echo "   Usage: $0 <sql_file>"
  echo "   Exemple: $0 ./data/exports/users_20250307_123456.sql"
  exit 1
fi

# V√©rifier si le fichier existe
if [ ! -f "$sql_file" ]; then
  echo "‚ùå Erreur: Fichier $sql_file introuvable"
  exit 1
fi

echo "=== Importation des donn√©es depuis $sql_file ==="

# V√©rifier si les variables d'environnement de base de donn√©es sont d√©finies
if [ -z "$DATABASE_URL" ]; then
  echo "‚ùå Erreur: Variable DATABASE_URL non d√©finie"
  exit 1
fi

# Demander confirmation avant d'importer
read -p "‚ö†Ô∏è Attention: Cette op√©ration peut √©craser des donn√©es existantes. Continuer? (o/n): " confirm
if [[ $confirm != "o" && $confirm != "O" ]]; then
  echo "‚ùå Importation annul√©e"
  exit 1
fi

# Extraire le nom de la table √† partir du nom du fichier
table_name=$(basename "$sql_file" | cut -d'_' -f1)
echo "üîÑ Table identifi√©e: $table_name"

# Cr√©er une sauvegarde avant l'importation
echo "üîÑ Cr√©ation d'une sauvegarde de la table $table_name..."
backup_file="./data/backups/${table_name}_backup_$(date +%Y%m%d_%H%M%S).sql"
mkdir -p ./data/backups
pg_dump -d "$DATABASE_URL" -t "$table_name" -a > "$backup_file"

# Importer les donn√©es
echo "üîÑ Importation des donn√©es..."
psql -d "$DATABASE_URL" -f "$sql_file"

# V√©rifier si l'importation a r√©ussi
if [ $? -ne 0 ]; then
  echo "‚ùå Erreur lors de l'importation des donn√©es"
  echo "   Une sauvegarde a √©t√© cr√©√©e dans $backup_file"
  exit 1
fi

echo "‚úÖ Donn√©es import√©es avec succ√®s!"
echo "   Une sauvegarde des donn√©es pr√©c√©dentes a √©t√© cr√©√©e dans $backup_file"
echo ""